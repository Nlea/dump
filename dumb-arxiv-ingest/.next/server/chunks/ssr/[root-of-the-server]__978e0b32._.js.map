{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///Users/nlea/Spaghetti/dump/dumb-arxiv-ingest/app/actions/actions.ts"],"sourcesContent":["\"use server\";\n\nimport * as cheerio from 'cheerio';\n\nexport async function scrapeArxivHtml(url: string): Promise<{ success: boolean; htmlContent?: string; textChunks?: string[]; error?: string }> {\n  console.log('Scraping URL:', url); // Log the URL being scraped\n\n  if (!url || !url.startsWith('https://arxiv.org/html/')) {\n    return { success: false, error: 'Invalid arXiv HTML URL provided. Must start with https://arxiv.org/html/' };\n  }\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        // Mimic a browser request\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n      }\n    });\n\n    if (!response.ok) {\n      console.error('Fetch failed:', response.status, response.statusText);\n      return { success: false, error: `Failed to fetch URL: ${response.status} ${response.statusText}` };\n    }\n\n    const html = await response.text();\n    const $ = cheerio.load(html);\n\n    // Select the main article content container\n    const articleElement = $('article.ltx_document');\n\n    if (articleElement.length === 0) {\n        console.error('Could not find article.ltx_document element');\n        return { success: false, error: 'Could not find main article content on the page.' };\n    }\n\n    // --- Remove all image elements ---\n    articleElement.find('img').remove();\n    console.log('[Image Removal] Removed all img tags from the article content.');\n    // --- End Image Removal ---\n\n    // --- Wrap individual block-level elements and extract text ---\n    const textChunks: string[] = []; // Array to hold text content of chunks\n    const blockSelectors = 'p, ul, ol, blockquote, pre, dl'; // Add more selectors as needed (e.g., h1-h6)\n    articleElement.find(blockSelectors).each((_, el) => {\n        const $el = $(el);\n        // Avoid wrapping elements that are already wrapped or essentially empty\n        const currentText = $el.text().trim(); // Get text early\n        if ($el.parent().hasClass('content-chunk') || currentText === '') {\n            return;\n        }\n\n        // Avoid wrapping list items directly, wrap the parent list instead\n        if ($el.is('li') && $el.parent().is('ul, ol')) {\n             const $parentList = $el.parent();\n             // Check if the parent list is *already* wrapped\n             if (!$parentList.parent().hasClass('content-chunk')) {\n                 const listText = $parentList.text().trim(); // Get text of the list\n                 if (listText !== '') {\n                    $parentList.wrap('<div class=\"content-chunk\"></div>');\n                    textChunks.push(listText); // Add text of the whole list\n                 }\n             }\n             // Skip processing the LI further, as the list is handled\n             return;\n        }\n\n        // Wrap other block elements (p, blockquote, pre, dl) or lists (ul, ol) directly\n        // Ensure the element itself isn't already wrapped (might happen if UL/OL processed after LI)\n        if (!$el.parent().hasClass('content-chunk')) {\n             $el.wrap('<div class=\"content-chunk\"></div>');\n             textChunks.push(currentText); // Add text of the element\n        }\n    });\n    console.log(`[Chunking] Wrapped elements matching \"${blockSelectors}\" and extracted ${textChunks.length} text chunks.`);\n    // --- End Chunking ---\n\n    // Get the modified HTML content of the article (with chunks wrapped)\n    const articleHtml = articleElement.html();\n\n    if (!articleHtml) {\n        console.error('article.ltx_document element found but contains no HTML.');\n        return { success: false, error: 'Main article content is empty.' };\n    }\n\n    console.log('Scraping successful, returning HTML content and text chunks.');\n    // Return HTML content AND the array of text chunks\n    return { success: true, htmlContent: articleHtml, textChunks: textChunks };\n\n  } catch (error) {\n    console.error('Error during scraping:', error);\n    // Check if the error is a FetchError or similar network issue\n    if (error instanceof Error) {\n        return { success: false, error: `Scraping failed: ${error.message}` };\n    }\n    return { success: false, error: 'An unknown error occurred during scraping.' };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AAAA;;;;;AAEO,eAAe,gBAAgB,GAAW;IAC/C,QAAQ,GAAG,CAAC,iBAAiB,MAAM,4BAA4B;IAE/D,IAAI,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,4BAA4B;QACtD,OAAO;YAAE,SAAS;YAAO,OAAO;QAA2E;IAC7G;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,SAAS;gBACP,0BAA0B;gBAC1B,cAAc;YAChB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,QAAQ,KAAK,CAAC,iBAAiB,SAAS,MAAM,EAAE,SAAS,UAAU;YACnE,OAAO;gBAAE,SAAS;gBAAO,OAAO,CAAC,qBAAqB,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;YAAC;QACnG;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,MAAM,IAAI,CAAA,GAAA,uJAAA,CAAA,OAAY,AAAD,EAAE;QAEvB,4CAA4C;QAC5C,MAAM,iBAAiB,EAAE;QAEzB,IAAI,eAAe,MAAM,KAAK,GAAG;YAC7B,QAAQ,KAAK,CAAC;YACd,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAmD;QACvF;QAEA,oCAAoC;QACpC,eAAe,IAAI,CAAC,OAAO,MAAM;QACjC,QAAQ,GAAG,CAAC;QACZ,4BAA4B;QAE5B,gEAAgE;QAChE,MAAM,aAAuB,EAAE,EAAE,uCAAuC;QACxE,MAAM,iBAAiB,kCAAkC,6CAA6C;QACtG,eAAe,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC,GAAG;YACzC,MAAM,MAAM,EAAE;YACd,wEAAwE;YACxE,MAAM,cAAc,IAAI,IAAI,GAAG,IAAI,IAAI,iBAAiB;YACxD,IAAI,IAAI,MAAM,GAAG,QAAQ,CAAC,oBAAoB,gBAAgB,IAAI;gBAC9D;YACJ;YAEA,mEAAmE;YACnE,IAAI,IAAI,EAAE,CAAC,SAAS,IAAI,MAAM,GAAG,EAAE,CAAC,WAAW;gBAC1C,MAAM,cAAc,IAAI,MAAM;gBAC9B,gDAAgD;gBAChD,IAAI,CAAC,YAAY,MAAM,GAAG,QAAQ,CAAC,kBAAkB;oBACjD,MAAM,WAAW,YAAY,IAAI,GAAG,IAAI,IAAI,uBAAuB;oBACnE,IAAI,aAAa,IAAI;wBAClB,YAAY,IAAI,CAAC;wBACjB,WAAW,IAAI,CAAC,WAAW,6BAA6B;oBAC3D;gBACJ;gBACA,yDAAyD;gBACzD;YACL;YAEA,gFAAgF;YAChF,6FAA6F;YAC7F,IAAI,CAAC,IAAI,MAAM,GAAG,QAAQ,CAAC,kBAAkB;gBACxC,IAAI,IAAI,CAAC;gBACT,WAAW,IAAI,CAAC,cAAc,0BAA0B;YAC7D;QACJ;QACA,QAAQ,GAAG,CAAC,CAAC,sCAAsC,EAAE,eAAe,gBAAgB,EAAE,WAAW,MAAM,CAAC,aAAa,CAAC;QACtH,uBAAuB;QAEvB,qEAAqE;QACrE,MAAM,cAAc,eAAe,IAAI;QAEvC,IAAI,CAAC,aAAa;YACd,QAAQ,KAAK,CAAC;YACd,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAiC;QACrE;QAEA,QAAQ,GAAG,CAAC;QACZ,mDAAmD;QACnD,OAAO;YAAE,SAAS;YAAM,aAAa;YAAa,YAAY;QAAW;IAE3E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,8DAA8D;QAC9D,IAAI,iBAAiB,OAAO;YACxB,OAAO;gBAAE,SAAS;gBAAO,OAAO,CAAC,iBAAiB,EAAE,MAAM,OAAO,EAAE;YAAC;QACxE;QACA,OAAO;YAAE,SAAS;YAAO,OAAO;QAA6C;IAC/E;AACF;;;IA5FsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///Users/nlea/Spaghetti/dump/dumb-arxiv-ingest/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {scrapeArxivHtml as '40a36ebcde7d28c90ab55eec73b3ccb86e64ec5612'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":["file:///Users/nlea/Spaghetti/dump/dumb-arxiv-ingest/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":["file:///Users/nlea/Spaghetti/dump/dumb-arxiv-ingest/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4P,GACzR,0BACA","debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}